#BlueJ class context
comment0.params=args
comment0.target=void\ main(java.lang.String[])
comment1.params=
comment1.target=Solitaire()
comment1.text=\n\ Creates\ a\ game\ of\ solitaire.\n
comment10.params=
comment10.target=void\ stockClicked()
comment10.text=\n\ @postcondition\ \ \ doesn't\ do\ anything\ if\ anything\ else\ is\ selected.\ If\ nothing\ else\ is\ selected,\ dealThreeCards()\ will\ be\n\ called\ if\ the\ stock\ isn't\ empty\ (resetStock()\ will\ be\ called\ if\ it's\ empty).\ Ultimately\ prints\ "stock\ clicked"\n
comment11.params=
comment11.target=void\ wasteClicked()
comment11.text=\n\ @postcondition\ \ \ unselects\ waste\ if\ already\ selected,\ otherwise\ selects\ waste.\ Ultimately,\ "waste\ clicked"\ is\ \n\ printed\n
comment12.params=index
comment12.target=void\ foundationClicked(int)
comment12.text=\n\ @param\ \ \ \ 0\ <\=\ int\ index\ <\ 4\n\ @postcondition\ \ \ if\ another\ pile\ is\ selected\ and\ card(s)\ from\ that\ pile\ can\ be\ moved,\ they\ will\ be\ moved\ from\ the\ pile\ to\ foundations[index].\ if\ waste\ is\ selected\ the\ same\ \n\ will\ happen\ with\ the\ card\ moving\ from\ the\ waste\ to\ foundations[index].\ the\ pile\ or\ waste\ will\ then\ be\ unselected.\ will\ check\ if\ foundations\ are\ completed\ and\ will\ print\ a\n\ congratulatory\ message\ if\ they\ are.\n
comment13.params=card\ index
comment13.target=boolean\ canAddToPile(Card,\ int)
comment13.text=\n\ @param\ \ \ 0\ <\=\ index\ <\ 7\n\ @param\ \ \ Card\ card\n\ @return\ \ true\ if\ card\ can\ be\ moved\ to\ piles[index];\ false\ if\ card\ cannot\ be\ moved\ to\ piles[index]\n
comment14.params=index
comment14.target=void\ pileClicked(int)
comment14.text=\n\ @param\ \ \ 0\ <\=\ index\ <\ 7\n\ @postcondition\ \ \ will\ evaluate\ the\ situation\ depending\ on\ which\ stacks\ are\ already\ selected,\ moving\ cards\ between\ piles\ as\ needed,\ and\ unselecting\ piles\ already\ selected.\n
comment15.params=index
comment15.target=java.util.Stack\ removeFaceUpCards(int)
comment15.text=\n\ @param\ \ \ 0\ <\=\ index\ <\ 7\n\ @postcondition\ \ \ all\ face\ up\ cards\ removed\ from\ piles[index]\n\ @return\ \ stack\ containing\ removed\ cards\n
comment16.params=cards\ index
comment16.target=void\ addToPile(java.util.Stack,\ int)
comment16.text=\n\ @param\ \ \ 0\ <\=\ index\ <\ 7\n\ @param\ \ \ Stack<Card>\ cards\n\ @postcondition\ \ \ adds\ cards\ in\ a\ stack\ of\ cards\ to\ piles[index]\n
comment17.params=card\ index
comment17.target=boolean\ canAddToFoundation(Card,\ int)
comment17.text=\n@param\ \ \ \ 0\ <\=\ index\ <\ 4\n@param\ \ \ \ Card\ card\n@return\ \ \ true\ if\ card\ can\ be\ added\ to\ foundations[index];\ false\ if\ card\ cannot\ be\ added\ to\ foundations[index]\n
comment18.params=
comment18.target=void\ emptyEverything()
comment18.text=\n\ @postcondition\ \ \ Solitaire\ game\ emptied\n
comment19.params=
comment19.target=void\ giveUp()
comment19.text=\n\ @postcondition\ \ \ Solitaire\ game\ emptied\ and\ reset\n
comment2.params=
comment2.target=void\ dealThreeCards()
comment2.text=\n\ deals\ three\ cards\ from\ the\ stock\ to\ the\ waste\ and\ turns\ them\ upward\n
comment3.params=
comment3.target=void\ resetStock()
comment3.text=\n\ moves\ all\ cards\ from\ waste\ into\ stock\ and\ turns\ them\ downward\n
comment4.params=
comment4.target=void\ createStock()
comment4.text=\n\ creates\ the\ cards\ in\ the\ game\ and\ puts\ them\ into\ the\ stock\ randomly\n
comment5.params=
comment5.target=void\ deal()
comment5.text=\n\ deals\ cards\ from\ stock\ into\ the\ 7\ piles\ appropriately,\ \n\ turning\ the\ last\ card\ added\ to\ each\ pile\ upward\n
comment6.params=
comment6.target=Card\ getStockCard()
comment6.text=\n\ @return\ \ top\ card\ in\ stock\ or\ null\ if\ stock\ empty\n
comment7.params=
comment7.target=Card\ getWasteCard()
comment7.text=\n\ @return\ \ top\ card\ in\ waste\ or\ null\ if\ waste\ empty\n
comment8.params=index
comment8.target=Card\ getFoundationCard(int)
comment8.text=\n\ @param\ \ \ index\ 0<\=\ index\ <4\ \n\ @return\ \ top\ card\ in\ one\ of\ foundations\ or\ null\ if\ foundation\ empty\n
comment9.params=index
comment9.target=java.util.Stack\ getPile(int)
comment9.text=\n\ @param\ 0<\=\ int\ index\ <7\n\ @return\ \ reference\ to\ piles[index]\n
numComments=20
